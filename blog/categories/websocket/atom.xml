<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: websocket | 慕凡(@ryudoawaru)'s blog]]></title>
  <link href="http://ryudo.tw/blog/categories/websocket/atom.xml" rel="self"/>
  <link href="http://ryudo.tw/"/>
  <updated>2014-01-01T02:43:17+08:00</updated>
  <id>http://ryudo.tw/</id>
  <author>
    <name><![CDATA[Mu-Fan Teng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby,Sinatra and Websocket]]></title>
    <link href="http://ryudo.tw/blog/2013/04/05/ruby-and-websocket/"/>
    <updated>2013-04-05T21:48:00+08:00</updated>
    <id>http://ryudo.tw/blog/2013/04/05/ruby-and-websocket</id>
    <content type="html"><![CDATA[<h3>近半年來花了很多時間在研究Ruby上實作Websocket的方式, 現介紹簡單心得如下</h3>

<p>Base Solution:</p>

<ul>
<li><a href="https://github.com/igrigorik/em-websocket">EventMachine-Websocket</a></li>
<li><a href="http://cramp.in/">Cramp</a></li>
</ul>


<p>Ruby系的幾乎不出這兩種, 其中又以前者為大宗, 後者顯然在Ruby界不流行而且基本上沒在更新了, 然後想當然我也只會用EM</p>

<h2>使用過的EM類Solution：</h2>

<h3><a href="https://github.com/simulacre/sinatra-websocket">Sinatra-Websocket</a></h3>

<p>最初的嘗試, 好處是整合性極高, 可以直接登記在Sinatra的route上以及共享一切Sinatra的設定, Application Server原則上只能用thin, 不過有致命性的memory leak問題, 簡單來說就是Thin會以為已經斷線的WS連線未斷線因此長久下去會在Thin的process上留著無數的連線進而吃掉大量記憶體, 而且作者沒有配合EM-Websocket改版, 因此被判定為不可用</p>

<h3>直接用EM-Websocket當server</h3>

<p>現在的解法, 優點是完全自訂, 同時也是缺點; 等於從0開始設定一個socket server, DB/model…等等的設定都要自己寫; 另外我還比較搞缸的寫了init script變成系統服務, 前端使用haproxy</p>

<h3>負載能力</h3>

<p>非常強, 只要處理掉系統的nofile<a href="https://github.com/shokai/sinatra-websocketio/wiki/C10K">設定</a>的話, 單一行程可以吃到破萬連線不是問題, 不過以現在的EM架構要開多行程處理數萬連線的話, 如果沒有再上一層的pub/sub機制就得要用fork出多行程的方式, 這時就得考慮類似mutex lock的問題了</p>

<h3>IE相容問題</h3>

<p><a href="https://github.com/gimite/web-socket-js">web-socket-js</a>可以解決你的問題, 不過如果你要用haproxy開前端的話就必需要自己設定flash socket policy file, 使用<a href="http://rubygems.org/gems/flash_policy_server">flash_policy_server </a>可手動開這個服務</p>

<p>實際的代碼與架構會在以後說明</p>
]]></content>
  </entry>
  
</feed>
