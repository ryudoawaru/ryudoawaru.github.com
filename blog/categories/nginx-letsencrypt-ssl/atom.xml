<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nginx,letsencrypt,ssl | 慕凡(@ryudoawaru)'s blog]]></title>
  <link href="http://ryudo.tw/blog/categories/nginx-letsencrypt-ssl/atom.xml" rel="self"/>
  <link href="http://ryudo.tw/"/>
  <updated>2017-02-02T17:24:36+08:00</updated>
  <id>http://ryudo.tw/</id>
  <author>
    <name><![CDATA[Mu-Fan Teng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用 letsencrypt-cli Rubygem 在 Nginx 上實裝 Let's Encrypt 免費 SSL 服務]]></title>
    <link href="http://ryudo.tw/blog/2016/02/23/apply-letsencrypt-ssl-under-nginx/"/>
    <updated>2016-02-23T12:40:00+08:00</updated>
    <id>http://ryudo.tw/blog/2016/02/23/apply-letsencrypt-ssl-under-nginx</id>
    <content type="html"><![CDATA[<p><a href="https://letsencrypt.org/">Let's Encrypt</a> 是一個（目前）免費的 SSL 服務，它和其它 SSL 服務商的不同，除了免費之外，就是它需要透過一些方式來驗證你對網站的所有權來申請與更新憑證，而且一次憑證的有效期限（目前）最大是 90 天，也就是說你要持續定期的更新憑證才能使用。</p>

<h3>Let's Encrypt 運作原理</h3>

<p>如<a href="https://letsencrypt.org/howitworks/technology/">官網</a>所示，比較白話一點的流程大概是：</p>

<ol>
<li>用指令向 Let's Encrypt 要求產生驗證 host example.com 的檔案</li>
<li>LE 給你驗證檔案</li>
<li>你將檔案放在 http://example.com/.well-known/acme-challenge 下</li>
<li>LE 會發出 HTTP Request 驗證該檔案是否存在前述 URL 下</li>
<li>如果有，則發放證書</li>
</ol>


<p>今天要講的是用 Nginx 加上<a href="https://github.com/zealot128/ruby-letsencrypt-cli">Let's Encrypt Ruby Cli Rubygem</a>的驗證方法</p>

<h4>為何要使用 ruby-letsencrypt-cli 而非 LE 官方版本 CLI</h4>

<ul>
<li>不需要 root 權限即可執行</li>
<li>函式庫相依性較簡單</li>
<li>功能相對單純</li>
</ul>


<h4>安裝 Let's Encrypt Ruby Cli</h4>

<p>安裝方式就是單純的 <code>gem install letsencrypt-cli</code> 即可。</p>

<h4>事前準備</h4>

<ul>
<li>安裝好 Gem</li>
<li>預備好以下目錄：

<ul>
<li>key-directory：放 key 的地方</li>
<li>webroot-path：在前述的 step 3 給 LE 做 acme-challenge 的檔案放置目錄</li>
<li>放置 account_key 的目錄，通常會放在你的 home</li>
<li>在你要生 SSL 證書的網站的 Virtual Host 的設定內放置以下設定並重啟 nginx，讓 LE 可以用 <code>http://example.com/.well-known/acme-challenge</code> 的網址認證 ：</li>
</ul>
</li>
</ul>


<p>```
server{
  ...
  location '/.well-known/acme-challenge/' {</p>

<pre><code>default_type "text/plain";
alias /var/www/acme-challenge/;
</code></pre>

<p>  }
}
```</p>

<ul>
<li>註冊 account，執行：<code>letsencrypt-cli register xxx.ooo.com</code> ，產生帳號密鑰 account_key.pem</li>
<li>讓 LE 認證你的網站，執行：<code>letsencrypt-cli authorize --webroot-path /var/www/acme-challenge example.com</code></li>
<li>生成 key：<code>cd key-directory &amp;&amp; letsencrypt-cli cert example.com</code>，會生成：cert.pem  chain.pem  fullchain.pem  key.pem 等四個檔案</li>
<li>設定 Nginx 在 Virtual Host 使用剛才產生的檔案：</li>
</ul>


<p>```</p>

<pre><code>server{
   ...
   ssl_certificate key-directory/fullchain.pem;
   ssl_certificate_key key-directory/key.pem;
}
</code></pre>

<p>```</p>

<ul>
<li>重啟 Nginx，完成</li>
</ul>


<h4>更新 Key</h4>

<p>執行</p>

<p><code>bash
letsencrypt-cli manage --days-valid 30 -a :account_key.pem的位置: --webroot-path /var/www/acme-challenge --key-directory /etc/letsencrypt/live :你要更新的 hosts 以空白分隔:
</code></p>

<p>建議把它加到 crontab 中定時執行</p>

<h3>問題整理：</h3>

<ul>
<li>執行 letsencrypt-cli 出現 <code>Acme::Client::Error::Malformed</code> 錯誤：請降級你的 json-jwt  gem 到 1.5.2</li>
<li>出現 Account Key Note Found：命令列加上 <code>-a :account_key.pem的位置:</code></li>
<li>openssl 版本太舊：openssl 版本建議在 1.0.2 以上，特別是如果要跑 http/2 的話</li>
</ul>

]]></content>
  </entry>
  
</feed>
